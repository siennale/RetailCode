{"version":3,"sources":["Navbar/index.tsx","MainSideBar/index.tsx","SummaryBar/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","useColorMode","colorMode","toggleColorMode","bg","useColorModeValue","px","h","alignItems","justifyContent","direction","spacing","onClick","as","Button","rounded","variant","cursor","minW","size","src","MainSideBar","props","data","scanData","useState","totalPrice","settotalPrice","useEffect","total","forEach","row","w","fontSize","p","isNumeric","map","rowValue","idx","toFixed","SummaryBar","verticalAlign","m","fontFamily","itemName","price","gst","pst","colorScheme","reset","calculateGST","scanValue","calculatePST","calculateName","calculatePrice","calculateTotal","App","setScanData","setGST","setPST","setItemName","setPrice","setTotal","onError","err","console","error","onScan","axios","get","then","res","concat","length","catch","log","minH","align","orientation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5966e5a.chunk.js","sourcesContent":["// import { ReactNode } from \"react\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Avatar,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  MenuDivider,\r\n  useColorModeValue,\r\n  Stack,\r\n  useColorMode,\r\n  Center,\r\n} from \"@chakra-ui/react\";\r\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\n\r\n// const NavLink = ({ children }: { children: ReactNode }) => (\r\n//   <Link\r\n//     px={2}\r\n//     py={1}\r\n//     rounded={\"md\"}\r\n//     _hover={{\r\n//       textDecoration: \"none\",\r\n//       bg: useColorModeValue(\"gray.200\", \"gray.700\"),\r\n//     }}\r\n//     href={\"#\"}\r\n//   >\r\n//     {children}\r\n//   </Link>\r\n// );\r\n\r\nexport default function Navbar() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  // const { isOpen, onOpen, onClose } = useDisclosure();\r\n  return (\r\n    <>\r\n      <Box bg={useColorModeValue(\"gray.100\", \"gray.900\")} px={4}>\r\n        <Flex h={14} alignItems={\"center\"} justifyContent={\"space-between\"}>\r\n          <Box>Laxmi POS</Box>\r\n\r\n          <Flex alignItems={\"center\"}>\r\n            <Stack direction={\"row\"} spacing={7}>\r\n              <Button onClick={toggleColorMode}>\r\n                {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\r\n              </Button>\r\n\r\n              <Menu>\r\n                <MenuButton\r\n                  as={Button}\r\n                  rounded={\"full\"}\r\n                  variant={\"link\"}\r\n                  cursor={\"pointer\"}\r\n                  minW={0}\r\n                >\r\n                  <Avatar\r\n                    size={\"sm\"}\r\n                    src={\"https://avatars.dicebear.com/api/male/username.svg\"}\r\n                  />\r\n                </MenuButton>\r\n                <MenuList alignItems={\"center\"}>\r\n                  <br />\r\n                  <Center>\r\n                    <Avatar\r\n                      size={\"2xl\"}\r\n                      src={\"https://avatars.dicebear.com/api/male/username.svg\"}\r\n                    />\r\n                  </Center>\r\n                  <br />\r\n                  <Center>\r\n                    <p>Username</p>\r\n                  </Center>\r\n                  <br />\r\n                  <MenuDivider />\r\n                  <MenuItem>Logout</MenuItem>\r\n                </MenuList>\r\n              </Menu>\r\n            </Stack>\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Text,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tfoot,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function MainSideBar(props) {\r\n  const data = props.scanData;\r\n  const [totalPrice, settotalPrice] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let total = 0;\r\n    data.forEach((row) => {\r\n      if (row.data) {\r\n        total += row.data[4] ? row.data[3] * 1.12 : row.data[3];\r\n      }\r\n    });\r\n    settotalPrice(total);\r\n    return () => {\r\n      settotalPrice(0);\r\n    };\r\n  }, [props, data]);\r\n\r\n  return (\r\n    <Box w=\"full\">\r\n      <Text fontSize=\"md\" p={2}>\r\n        Summary\r\n      </Text>\r\n      <Table size=\"sm\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Items</Th>\r\n            <Th>Qty</Th>\r\n            <Th isNumeric>Price</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {data.map((rowValue, idx) => (\r\n            <Tr key={idx}>\r\n              <Td>{rowValue.data[2]}</Td>\r\n              <Td isNumeric>1</Td>\r\n              <Td isNumeric>\r\n                {(rowValue.data[4]\r\n                  ? rowValue.data[3] * 1.12\r\n                  : rowValue.data[3]\r\n                ).toFixed(2)}\r\n              </Td>\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n        <Tfoot>\r\n          <Tr>\r\n            <Th>Total</Th>\r\n            <Th isNumeric>{totalPrice.toFixed(2)}</Th>\r\n          </Tr>\r\n        </Tfoot>\r\n      </Table>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Center,\r\n  Heading,\r\n  Text,\r\n  Box,\r\n  Button,\r\n  VStack,\r\n  HStack,\r\n} from \"@chakra-ui/react\";\r\nimport \"@fontsource/raleway/400.css\";\r\n\r\nexport default function SummaryBar(props) {\r\n  return (\r\n    <VStack w=\"full\" h=\"full\">\r\n      <HStack h=\"full\">\r\n        <Box>\r\n          <Center verticalAlign=\"true\" p={2} m={3}>\r\n            <Heading fontFamily=\"\">Item</Heading>\r\n          </Center>\r\n          <Center verticalAlign=\"true\">\r\n            <Text fontSize=\"lg\">{props.itemName}</Text>\r\n          </Center>\r\n          <Center verticalAlign=\"true\">\r\n            <Text fontSize=\"lg\">$ {props.price}</Text>\r\n          </Center>\r\n          <Center verticalAlign=\"true\">\r\n            <Text fontSize=\"lg\">\r\n              Tax GST = ${props.gst} PST = ${props.pst}\r\n            </Text>\r\n          </Center>\r\n          <Center verticalAlign=\"true\">\r\n            <Text fontSize=\"lg\">Total $ {props.total}</Text>\r\n          </Center>\r\n        </Box>\r\n      </HStack>\r\n      <HStack>\r\n        <Box>\r\n          <Button\r\n            colorScheme=\"teal\"\r\n            size=\"md\"\r\n            p={3}\r\n            m={4}\r\n            variant=\"outline\"\r\n            onClick={props.reset}\r\n          >\r\n            Done\r\n          </Button>\r\n          <Button\r\n            colorScheme=\"teal\"\r\n            size=\"md\"\r\n            p={3}\r\n            m={4}\r\n            variant=\"outline\"\r\n            onClick={props.reset}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </Box>\r\n      </HStack>\r\n    </VStack>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport { ChakraProvider, Box } from \"@chakra-ui/react\";\nimport Navbar from \"./Navbar/index\";\nimport MainSideBar from \"./MainSideBar\";\nimport SummaryBar from \"./SummaryBar\";\nimport { Divider, Grid, HStack, VStack } from \"@chakra-ui/react\";\nimport BarcodeReader from \"react-barcode-reader\";\nimport axios from \"axios\";\n\nconst calculateGST = (scanValue) => {\n  if (scanValue && scanValue.data && scanValue.data[4]) {\n    return (scanValue.data[3] * 0.05).toFixed(2);\n  } else {\n    return \"0\";\n  }\n};\n\nconst calculatePST = (scanValue) => {\n  if (scanValue && scanValue.data && scanValue.data[4]) {\n    return (scanValue.data[3] * 0.07).toFixed(2);\n  } else {\n    return \"0\";\n  }\n};\n\nconst calculateName = (scanValue) => {\n  if (scanValue && scanValue.data && scanValue.data[2]) {\n    return scanValue.data[2];\n  } else {\n    return \"Scan The Item OR Item not found \";\n  }\n};\n\nconst calculatePrice = (scanValue) => {\n  if (scanValue && scanValue.data && scanValue.data[3]) {\n    return scanValue.data[3];\n  } else {\n    return \"0\";\n  }\n};\n\nconst calculateTotal = (scanValue) => {\n  if (scanValue && scanValue.data && scanValue.data[4]) {\n    return (scanValue.data[3] * 1.12).toFixed(2);\n  } else {\n    return \"0\";\n  }\n};\n\nexport default function App() {\n  const [scanData, setScanData] = useState([]);\n  const [gst, setGST] = useState(calculateGST(0));\n  const [pst, setPST] = useState(calculatePST(0));\n  const [itemName, setItemName] = useState(calculateName(0));\n  const [price, setPrice] = useState(calculatePrice(0));\n  const [total, setTotal] = useState(calculateTotal(0));\n\n  const resetData = () => {\n    setScanData([]);\n    setGST(calculateGST(0));\n    setPST(calculatePST(0));\n    setItemName(calculateName(0));\n    setPrice(calculatePrice(0));\n    setTotal(calculateTotal(0));\n  };\n\n  const handleScan = (data) => {\n    axios\n      .get(\"http://localhost:5001/product?barcode=\" + data)\n      .then((res: any) => {\n        if (res.data != null) setScanData(scanData.concat(res));\n        if (scanData.length > 15) setScanData([]);\n        setGST(calculateGST(res));\n        setPST(calculatePST(res));\n        setItemName(calculateName(res));\n        setPrice(calculatePrice(res));\n        setTotal(calculateTotal(res));\n      })\n      .catch((err) => {\n        console.log(\"Error:\");\n      });\n  };\n\n  const handleError = (err) => console.error(err);\n\n  return (\n    <ChakraProvider>\n      <BarcodeReader onError={handleError} onScan={handleScan} />\n      <Grid minH=\"100vh\">\n        <HStack w=\"full\" spacing=\"0px\" align=\"flex-start\">\n          <VStack h=\"full\" w=\"full\" spacing=\"0px\" align=\"flex-start\">\n            <HStack w=\"full\" h={14} spacing=\"0px\">\n              <Box h={16} w=\"full\">\n                <Navbar />\n              </Box>\n            </HStack>\n            <HStack w=\"full\" h=\"full\" spacing=\"0px\">\n              <HStack h=\"full\" w={550} spacing=\"0px\" align=\"flex-start\">\n                <MainSideBar scanData={scanData} />\n              </HStack>\n              <Divider orientation=\"vertical\" />\n              <HStack h=\"full\" w=\"full\" spacing=\"0px\">\n                <SummaryBar\n                  gst={gst}\n                  pst={pst}\n                  itemName={itemName}\n                  price={price}\n                  total={total}\n                  reset={resetData}\n                />\n              </HStack>\n            </HStack>\n          </VStack>\n        </HStack>\n      </Grid>\n    </ChakraProvider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}