{"version":3,"sources":["components/Home/home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","barcode","currentList","price","product","name","handleScan","bind","handleDoneBtn","handleResetBtn","addToCurrentList","data","console","log","this","setState","axios","post","then","res","tax","err","error","className","Navbar","class","bg","Brand","href","id","map","val","key","type","onClick","onError","handleError","onScan","parseFloat","toFixed","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8UAsHeA,E,kDA5GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAS,gCACTC,YAAc,CAAC,QAAS,YACxBC,MAAQ,EACRC,QAAS,GACTC,KAAM,IAGV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBAbT,E,uDAgBRI,GAAO,IAAD,OACbC,QAAQC,IAAI,eAAgBF,GAC5BG,KAAKC,SAAS,CACVd,QAASU,IAGb,IAAIV,EAAUU,EAEdK,IAAMC,KAAN,0CAAsD,CAAEhB,YACnDiB,MAAK,SAAAC,GACFP,QAAQC,IAAIM,EAAIR,MAChB,EAAKI,SAAS,CACVX,QAASe,EAAIR,KACbR,MAAOgB,EAAIR,KAAK,GAChBN,KAAMc,EAAIR,KAAK,GACfS,IAAKD,EAAIR,KAAK,U,kCAIlBU,GACRT,QAAQU,MAAMD,K,sCAIdT,QAAQC,IAAI,sBACZC,KAAKC,SAAS,CACVb,YAAc,O,uCAKlBU,QAAQC,IAAI,oBACZC,KAAKC,SAAS,CACVb,YAAc,O,yCAKlBU,QAAQC,IAAI,0BACZC,KAAKC,SAAS,CACVb,YAAW,sBAAOY,KAAKd,MAAME,aAAlB,CAA+B,U,+BAK9C,OACI,yBAAKqB,UAAU,QACX,kBAACC,EAAA,EAAD,CAAQC,MAAM,SAASC,GAAG,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACf,yBAAKH,MAAM,eAAX,2BAIR,yBAAKI,GAAG,QAEJ,yBAAKA,GAAG,WACJ,4BACKf,KAAKd,MAAME,YAAY4B,KAAI,SAAAC,GACxB,OAAO,wBAAIC,IAAKD,GAAT,IAAgBA,OAI/B,yBAAKN,MAAM,eACP,4BAAQQ,KAAK,SAASR,MAAM,oCAAoCS,QAASpB,KAAKN,eAA9E,QACA,4BAAQyB,KAAK,SAASR,MAAM,qCAAqCS,QAASpB,KAAKL,gBAA/E,WAIR,yBAAKoB,GAAG,WACJ,yBAAKJ,MAAM,iBACP,uBAAGA,MAAM,mBAAT,wBACA,yBAAKA,MAAM,aACP,yBAAKA,MAAM,aACP,kBAAC,IAAD,CACIU,QAASrB,KAAKsB,YACdC,OAAQvB,KAAKR,aAEjB,6BAAMQ,KAAKd,MAAMC,SACjB,6BAAMa,KAAKd,MAAMK,MACjB,6BACsB,GAApBS,KAAKd,MAAMG,MAAa,yBAAKsB,MAAM,kBAAX,IAA8BX,KAAKd,MAAMG,OAAc,wEACjF,6BACEW,KAAKd,MAAMoB,IAAM,qCAAWkB,WAA8B,IAAnBxB,KAAKd,MAAMG,MAAeW,KAAKd,MAAMG,OAAOoC,QAAQ,GAA1E,cAAyFD,WAA8B,IAAnBxB,KAAKd,MAAMG,MAAeW,KAAKd,MAAMG,OAAOoC,QAAQ,GAAxJ,KAAqK,e,GArGzMC,aCKJC,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,Q,MCKcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLV,QAAQU,MAAMA,EAAMoC,c","file":"static/js/main.4f55c99a.chunk.js","sourcesContent":["import React, {Component } from 'react';\r\nimport './home.css';\r\nimport axios from 'axios';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport BarcodeReader from 'react-barcode-reader'\r\n\r\nclass Home extends Component {\r\n\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            barcode: 'Please Scan Barcode for Price',\r\n            currentList : [\"Apple\", \"Pop coke\"],\r\n            price : 0,\r\n            product: {},\r\n            name: \"\"\r\n        }\r\n\r\n        this.handleScan = this.handleScan.bind(this)\r\n        this.handleDoneBtn = this.handleDoneBtn.bind(this);\r\n        this.handleResetBtn = this.handleResetBtn.bind(this);\r\n        this.addToCurrentList = this.addToCurrentList.bind(this);\r\n    }\r\n\r\n    handleScan(data) {\r\n        console.log(\"Barcode id: \"+ data);\r\n        this.setState({\r\n            barcode: data,\r\n        })\r\n\r\n        var barcode = data;\r\n\r\n        axios.post(`http://localhost:5001/getPriceByBarcode`, { barcode } )\r\n            .then(res => {\r\n                console.log(res.data);\r\n                this.setState({\r\n                    product: res.data,\r\n                    price: res.data[3],\r\n                    name: res.data[2],\r\n                    tax: res.data[4]\r\n                })  \r\n            })\r\n    }\r\n    handleError(err) {\r\n        console.error(err)\r\n    }\r\n\r\n    handleDoneBtn(){\r\n        console.log(\"donebutton pressed\")\r\n        this.setState({\r\n            currentList : []\r\n        }) \r\n    }\r\n\r\n    handleResetBtn(){\r\n        console.log(\"Rest btn pressed\")\r\n        this.setState({\r\n            currentList : [],\r\n        }) \r\n    }\r\n    \r\n    addToCurrentList(){\r\n        console.log(\"Adding to current list\");\r\n        this.setState({\r\n            currentList : [...this.state.currentList, \"s\"],\r\n        }) \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <Navbar class=\"navbar\" bg=\"dark\">\r\n                    <Navbar.Brand href=\"#home\">\r\n                        <div class=\"navbar-font\">Welcome to the portal</div>\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n\r\n                <div id=\"page\">\r\n\r\n                    <div id=\"sideBar\">\r\n                        <ul>\r\n                            {this.state.currentList.map(val => {\r\n                                return <li key={val}> {val}</li>\r\n                            })}\r\n                        </ul>\r\n\r\n                        <div class=\"bottom-left\">\r\n                            <button type=\"button\" class=\"btn btn-primary btn-lg doneButton\" onClick={this.handleDoneBtn}>Done</button>\r\n                            <button type=\"button\" class=\"btn btn-primary btn-lg resetButton\" onClick={this.handleResetBtn}>Reset</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"content\">\r\n                        <div class=\"inner-content\">\r\n                            <p class=\"welcome-message\">Price of the Product</p>\r\n                            <div class=\"inner-box\">\r\n                                <div class=\"price-box\">\r\n                                    <BarcodeReader\r\n                                        onError={this.handleError}\r\n                                        onScan={this.handleScan}\r\n                                    />\r\n                                    <div>{this.state.barcode}</div>\r\n                                    <div>{this.state.name}</div>\r\n                                    <br></br>\r\n                                    { this.state.price != 0 ? <div class=\"original-price\">${this.state.price}</div>: <div>This Item is not in the Product List :(</div>}\r\n                                    <br></br>\r\n                                    { this.state.tax ? <div> GST${parseFloat(this.state.price * 0.05 + this.state.price).toFixed(2)}, GST+PST ${parseFloat(this.state.price * 0.12 + this.state.price).toFixed(2)} </div> : null}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Home;","import React from 'react';\r\nimport Home from './components/Home/home';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home></Home>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}